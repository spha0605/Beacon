package com.example.spha0605.beacon;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import com.estimote.sdk.Beacon;import com.estimote.sdk.BeaconManager;import com.estimote.sdk.Region;import com.estimote.sdk.SystemRequirementsChecker;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.UUID;public class MainActivity extends AppCompatActivity {    private static final Map<String, List<String>> PLACES_BY_BEACONS;    // TODO: replace "<major>:<minor>" strings to match your own beacons.    static {        Map<String, List<String>> placesByBeacons = new HashMap<>();        placesByBeacons.put("15083:17427", new ArrayList<String>() {{            add("Heavenly Sandwiches");            // read as: "Heavenly Sandwiches" is closest            // to the beacon with major 22504 and minor 48827            add("Green & Green Salads");            // "Green & Green Salads" is the next closest            add("Mini Panini");            // "Mini Panini" is the furthest away        }});        placesByBeacons.put("648:12", new ArrayList<String>() {{            add("Mini Panini");            add("Green & Green Salads");            add("Heavenly Sandwiches");        }});        PLACES_BY_BEACONS = Collections.unmodifiableMap(placesByBeacons);    }    private BeaconManager beaconManager;    private Region region;    private List<String> placesNearBeacon(Beacon beacon) {        String beaconKey = String.format("%d:%d", beacon.getMajor(), beacon.getMinor());        if (PLACES_BY_BEACONS.containsKey(beaconKey)) {            return PLACES_BY_BEACONS.get(beaconKey);        }        return Collections.emptyList();    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        beaconManager = new BeaconManager(this);        beaconManager.setRangingListener(new BeaconManager.RangingListener() {            @Override            public void onBeaconsDiscovered(Region region, List<Beacon> list) {                if (!list.isEmpty()) {                    Beacon nearestBeacon = list.get(0);                    List<String> places = placesNearBeacon(nearestBeacon);                    // TODO: update the UI here                    Log.d("Airport", "Nearest places: " + places);                }            }        });        region = new Region("ranged region",                UUID.fromString("B9407F30-F5F8-466E-AFF9-25556B57FE6D"), null, null);    }    @Override    protected void onResume() {        super.onResume();        SystemRequirementsChecker.checkWithDefaultDialogs(this);        beaconManager.connect(new BeaconManager.ServiceReadyCallback() {            @Override            public void onServiceReady() {                beaconManager.startRanging(region);            }        });    }    @Override    protected void onPause() {        beaconManager.stopRanging(region);        super.onPause();    }}